# --- Stage 1: Build the React Frontend ---
# Use an official Node.js image for the build environment. 'alpine' is a lightweight version.
FROM node:18-alpine AS build-stage

# Set the working directory for the frontend build
WORKDIR /app

# Copy package.json and install all dependencies needed for the build
COPY frontend/package*.json ./frontend/
RUN npm install --prefix frontend

# Copy the rest of the frontend source code
COPY frontend/ ./frontend/

# Build the static files for production. The output will be in /app/frontend/build
RUN npm run build --prefix frontend

# --- Stage 2: Create the Final Node.js Server Image ---
# Start from a fresh, clean Node.js image for the final production environment
FROM node:18-alpine

# Set the working directory for the final application
WORKDIR /app

# Set the environment to production. This tells Express to run in an optimized mode
# and also allows our server.js to dynamically serve static files.
ENV NODE_ENV=production

# Copy package.json from the backend and install only production dependencies.
# This keeps the final image smaller and more secure by omitting devDependencies.
COPY backend/package*.json ./backend/
RUN npm install --prefix backend --production

# Copy the rest of the backend source code
COPY backend/ ./backend/

# --- Combine Frontend and Backend ---
# Copy the built static files from the 'build-stage' into a 'build' folder
# that the Express server will use to serve the frontend.
COPY --from=build-stage /app/frontend/build ./build

# The server will run on port 5000 inside the container
EXPOSE 5000

# The command to start the Node.js server in production mode.
# This should correspond to the "start" script in your backend/package.json.
CMD ["npm", "start", "--prefix", "backend"]